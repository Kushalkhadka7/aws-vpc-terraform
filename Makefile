.PHONY: env
.DEFAULT_GOAL := help

SHELL := /bin/bash
APP_ROOT ?= $(shell 'pwd')

export $(cat .env | xargs)

define PRINT_HELP_SCRIPT
import re, sys

ENDC = '\033[0m'
OKGREEN = '\033[92m'

for line in sys.stdin:
	match = re.match(r'^([/a-zA-Z_-]+):.*?## (.*)$$', line)

	if match:
		target, help = match.groups()
		print(OKGREEN + "%-30s%s" % (target, help))
endef
export PRINT_HELP_SCRIPT

include Makefile.terraform
include Makefile.docker

TERRAFORM_FILES = $(wildcard modules/*/*.tf) \
			$(wildcard *.tf)

CLEAN_UP_FILES = $(wildcard *.lock.*) \
			$(wildcard *.tfstate)

IMAGE_NAME = crkushal/test-infra:latest

DOCKER_RUN ?= \
	docker run \
	-it \
	-v $(APP_ROOT):/app \
	-w /app \
	--env AWS_REGION=$(AWS_REGION) \
	--env AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID) \
	--env AWS_SECRET_KEY=$(AWS_SECRET_KEY) \
	$(IMAGE_NAME)

docker/terraform-init: ## Initialize terraform plugins and modules
	@$(DOCKER_RUN) terraform-init

docker/terraform-format: ## Format all files with .tf extension in the working directory
	@$(DOCKER_RUN) terraform-format

docker/terraform-plan: ## Print out the blueprint of the resources which will be created.
	@$(DOCKER_RUN) terraform-plan

docker/terraform-apply: ## Apply terraform and create the actual resources
	@$(DOCKER_RUN) terraform-apply

docker/terraform-destroy: ## Destroy resources created by terraform.
	@$(DOCKER_RUN) terraform-destroy

docker/terraform-validate: ## Validate terraform files
	@$(DOCKER_RUN) terraform-validate

docker/terraform-fmt-check: ## Lint files with `.tf` extension
	@$(DOCKER_RUN) terraform-fmt-check

docker/terraform-version: ## Print current terraform version
	@$(DOCKER_RUN) terraform-version

docker/terraform-clean: ## Remove extra files generated by terraform
	@$(DOCKER_RUN) terraform-clean

# Display available commands for all targets
help: ## Help
	@python3 -c "$$PRINT_HELP_SCRIPT" < $(MAKEFILE_LIST)
